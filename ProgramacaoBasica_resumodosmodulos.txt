Toda variavel tem um valor, um nome (identificador) e um tipo.
Exemplo: 19: valor (19), nome (idade), tipo (numero)
	Ze: valor (ze), nome (nome), tipo (letras)

Regras para nomear um variavel:
Comecar com uma letra;
So usar letras e numeros;
Nao usar acentos;
Nao pode conter espacos;
Nao pode ter simbolos (so o underline);
Nao pode ser uma palavra reservada.

Tipos primitivos e valores
Numeros: inteiro (130), real (4.5)
Letras: caracter ('A'), cadeia ("Ola")
Respostas: logico (verdadeiro ou falso)

Para declarar uma variavel:
tipo identificador = valor

Constante e um espaco de memoria cujo valor nao varia (variavel que nao varia)
Exemplo: colocar uma palavra que indique a constancia antes da variavel. (no portugol, e const, depende da linguagem)
	const inteiro idade = 19 (essa variavel sera sempre 19)

Entrada = normalmente e o teclado para a cpu, de forma a processar os dados
saida = o mais padrao e o monitor

Usar biblioteca: inserir biblioteca para usar novos comandos
Vantagem: torna a linguagem mais leve, economia de memoria, execucao mais otimizada, mais extensibilidade

OPERACOES ARITMETICAS

SOMA +
Subtracao - 
Multiplicacao *
Divisao /
Modulo %

Ordem de precedencia das operacoes aritmeticas
1- ()
2- + ou - unario
3- * / %
4- + ou - binario

Simplificando expressoes

k = k * 3 ===> k *= 3
a = a + 4 ===> a += 4
n = n - 1 ===> n -- 1

Fluxograma: mostra a sequencia da sua logica

Operadores relacionais: servem para fazer relacoes, comparacoes entre valores

Comparacao no portugol == (testam a igualdade)
Diferente: != (testam a diferenca)
 < > <= (menor ou igual) >= (maior ou igual)

Quando estamos com operacoes simples, nao e possivel utilizar mais de um operador, mas, qd aparecem, deve-se resolver o que estiver primeiro. A ordem de precedencia e de quem aparecer primeiro.

Uma expressao que tem operador relacional vai ter necessariamente um resultado logico (verdadeiro ou falso)

Operadores logicos para comparacao (portugol studio)
E conjuncao
ou disjuncao
nao negacao

Toda premissa pode ser verdadeira ou falsa

PREMISSA E: Para a premissa ser verdadeira, as duas possibilidades precisam ser verdadeiras, todo o restante e falso.
PREMISSA OU: basta que uma premissa seja verdadeira para que o resultado logico seja verdadeiro
PREMISSA NAO: Ou e verdadeiro ou e falso

Precedencia dos operadores logicos:
NAO > E > OU

Precedencia total
PARENTESES > ARITMETICOS > RELACIONAIS > LOGICOS

CONDICOES SIMPLES

CONDICOES COMPOSTAS: so precisa colocar {} no senao, se o se tiver mais de um comando

CONDICOES ANINHADAS: varias condicoes, uma dentro da outra, tal qual um ninho

CONDICOES MULTIPLAS: varias opcoes fixas. So aceita numeros e caracter

ESTRUTURA DE REPETICAO COM TESTE LOGICO NO INICIO => estrutura while
Fluxo - condicao - sim ou nao - looping (enquanto a condicao for verdadeira/enquanto for sim, o looping vai acontecer)

Se nao houver icremento, o looping vai ficar infinito.

Variavel contadora: soma um valor fixo ( +1, +2, etc)
Variavel acumuladora: soma o valor de uma variavel com outra variavel

Repeticao em flag = repeticao quando nao se sabe o valor de repeticoes (contador).

Repeticao com interrupcao = looping infinito, usa-se o comando "pare" para parar a repeticao. a estrutura enquanto sempe comeca como verdadeira

Repeticao com teste logico no final: estrutura faca enquanto (faca -bloco- enquanto -condicao-)

Repeticao com variavel de controle: variavel que conta, ela controla quantas vezes a variavel vai acontecer (ela tem tres comportamentos padroes: c=1(inicializacao; c<=4(teste logico); c++(incremento): para (c=1;c<=4;c++) Sempre que uma condicao for falsa, o numero fica ESTOURADO.

Lacos aninhados: quando a variavel fica estourada, ela recomeca a sua contagem e volta a valer o valor inicial

Modulo 4
Variaveis simples =  guarda apenas um valor para a variavel. inteiro (nome)
Variaveis compostas = guarda varios valores para a mesma variavel, entao sao necessarios identificadores para os indices (elementos/valores) inteiro (nome)[n de indices]

O primeiro indice e sempre 0
Variavel composta homogenea unidimensal = vetor